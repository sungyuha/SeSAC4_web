절차 지향 프로그래밍
 - 프로그래밍을 기능 중심으로 바라보는 방식
 - 절차적으로 프로그램 과정을 진행
 - 무엇을 어떤 절차로 할 것인가? 어떤 순서로 저치할 것인가?

객체 지향 프로그래밍
 - OOP
 - 많은 역할을 할 경우 객체로 묶어서 처리 -> 대형 프로그래밍

개인 프로젝트 아니면 객체 지향 프로그램을 많이 사용!

OOP
 - 상속 : OOP 구현 시 계층을 표현하기 위해 사용되는 개념
 - 하위 객체(자식)은 상위 객체(부모)의 특징(메소드, 변수 등)을 물려받아 사용할 수 있다.

ref 
 - 리액트 프로젝트 내부에서 DOM에 이름을 다는 방법
 - DOM을 직접적으로 건드려야 할 때 사용

함수 내부에서 피라미터로 받은 ref를 컴포넌트의 멤버 변수로 설정
이렇게 하면 this.input은 input 요소의 DOM을 가리킴
ref의 이름은 자유롭게

ref를 만드는 또 다른 방법은 리액트에 내장되어 있는createRef 라는 함수를 사용

	
<Sample
    ref={ (ref) => this.Sample=ref }
/>

컴포넌트에ref를다는방법은DOM에ref를다는방법과똑같아요.이렇게해주면Sample내부의메서드와변수에접근 가능

- scrollTop: 세로 스크롤바 위치(0~350)
- scrollHeight: 스크롤이 있는 박스 안의 div 높이(650)
- clientHeight: 스크롤이 있는 박스의 높이(300)

const {scrollHeight, clientHeight} = this.box;
 
다음 코드와 같은 의미입니다.
const scrollHeight = this.box.scrollHeight;
const clientHeight = this.box.clientHeight;

// 컴포넌트끼리 데이터를 교류해야 할 때는 반드시 데이터를 부모와 자식 흐름으로 교류해야 함
함수형 컴포넌트 에서는useRef라는 Hook 을사용 -> Hooks 수업에서 배울 예정

~리액트의 라이프 사이클은 무엇인지 기술 면접에 단골 질문.

*라이프 사이클
- 수명 주기
- 모든 리액트 컴포넌트에 존재하는 것

mount : 생성

*componentDidMount : 랜더를 실행하고, 그 즉시 실행시키는것
-> 초기에 서버와 통신해야 할 때 사용

update : 요소들이 업데이트 될 때

unmount : 컴포넌트가 사라질 때
-> 컴포넌트가 사라지기 전에 실행 (잘 사용하지 않음)
